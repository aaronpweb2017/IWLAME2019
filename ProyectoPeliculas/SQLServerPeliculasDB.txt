CREATE DATABASE Peliculas

USE Peliculas

------------------------------------------------------------------------------------------------------

CREATE TABLE TipoResolucion(
    id_tipo_resolucion INT IDENTITY(1, 1) NOT NULL,
    nombre_tipo_resolucion VARCHAR(20) NOT NULL,
    porcentaje_visualizacion DECIMAL(6, 3) NOT NULL,
    porcentaje_perdida DECIMAL(6, 3) NOT NULL
)

ALTER TABLE TipoResolucion ADD CONSTRAINT
id_tipo_resolucion_PK_CSTR PRIMARY KEY(id_tipo_resolucion)

INSERT INTO TipoResolucion(nombre_tipo_resolucion, 
porcentaje_visualizacion, porcentaje_perdida) VALUES
('Clasica', 75.000, 25.000),
('Standard', 74.075, 25.925),
('Open Matte', 87.500, 12.500),
('IMAX', 100.000, 0.000)

SELECT TR.id_tipo_resolucion, TR.nombre_tipo_resolucion, 
TR.porcentaje_visualizacion, TR.porcentaje_perdida
FROM TipoResolucion TR

DROP TABLE TipoResolucion

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE ValorResolucion(
    id_valor_resolucion INT IDENTITY(1, 1) NOT NULL,
    valor_resolucion VARCHAR(9) NOT NULL,
)

ALTER TABLE ValorResolucion ADD CONSTRAINT
id_valor_resolucion_PK_CSTR PRIMARY KEY(id_valor_resolucion)

--ALTER TABLE ValorResolucion ADD CONSTRAINT
--valor_resolucion_CK_CSTR CHECK(valor_resolucion LIKE '[624-1920]x[336-1080]')

INSERT INTO ValorResolucion(valor_resolucion) VALUES
('624x352'),
('640x472'),
('688x336'),
('1024x576'),
('1056x592'),
('1152x648'),
('1280x526'),
('1280x534'),
('1280x542'),
('1280x690'),
('1280x716'),
('1280x720'),
('1488x1080'),
('1904x784'),
('1920x800'),
('1920x802'),
('1920x804'),
('1920x808'),
('1920x816'),
('1920x1012'),
('1920x1024'),
('1920x1032'),
('1920x1036'),
('1920x1040'),
('1920x1072'),
('1920x1080')

SELECT VR.id_valor_resolucion,
VR.valor_resolucion
FROM ValorResolucion VR

DROP TABLE ValorResolucion

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE RelacionAspecto(
    id_relacion_aspecto INT IDENTITY(1, 1) NOT NULL,
    valor_relacion_aspecto VARCHAR(5) NOT NULL,
)

ALTER TABLE RelacionAspecto ADD CONSTRAINT
id_relacion_aspecto_PK_CSTR PRIMARY KEY(id_relacion_aspecto)

--ALTER TABLE RelacionAspecto ADD CONSTRAINT
--valor_relacion_aspecto_CK_CSTR CHECK(valor_relacion_aspecto LIKE '[4-16]:[3-9]')

INSERT INTO RelacionAspecto(valor_relacion_aspecto) VALUES
('4:3'),
('5:12'),
('16:9')

SELECT RA.id_relacion_aspecto,
RA.valor_relacion_aspecto
FROM RelacionAspecto RA

DROP TABLE RelacionAspecto

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Resolucion(
    id_tipo_resolucion INT NOT NULL,
    id_valor_resolucion INT NOT NULL,
    id_relacion_aspecto INT NOT NULL
)

ALTER TABLE Resolucion ADD CONSTRAINT id_tipo_valor_relacion_PK_CSTR
PRIMARY KEY(id_tipo_resolucion, id_valor_resolucion, id_relacion_aspecto)

ALTER TABLE Resolucion ADD CONSTRAINT id_tipo_resolucion_FK_CSTR
FOREIGN KEY(id_tipo_resolucion) REFERENCES TipoResolucion(id_tipo_resolucion)

ALTER TABLE Resolucion ADD CONSTRAINT id_valor_resolucion_FK_CSTR
FOREIGN KEY(id_valor_resolucion) REFERENCES ValorResolucion(id_valor_resolucion)

ALTER TABLE Resolucion ADD CONSTRAINT id_relacion_aspecto_FK_CSTR
FOREIGN KEY(id_relacion_aspecto) REFERENCES RelacionAspecto(id_relacion_aspecto)

INSERT INTO Resolucion(id_tipo_resolucion,
id_valor_resolucion, id_relacion_aspecto) VALUES
(4, 1, 3),
(1, 2, 1),
(2, 3, 2),
(3, 4, 3),
(3, 5, 3),
(3, 6, 3),
(2, 7, 2),
(2, 8, 2),
(2, 9, 2),
(4, 10, 3),
(4, 11, 3),
(3, 12, 3),
(4, 12, 3),
(1, 13, 1),
(2, 14, 2),
(2, 15, 2),
(2, 16, 2),
(2, 17, 2),
(2, 18, 2),
(2, 19, 2),
(4, 20, 3),
(4, 21, 3),
(4, 22, 3),
(4, 23, 3),
(4, 24, 3),
(4, 25, 3),
(3, 26, 3),
(4, 26, 3)

SELECT RE.id_tipo_resolucion, RE.id_valor_resolucion,
RE.id_relacion_aspecto FROM Resolucion RE

SELECT TR.nombre_tipo_resolucion, VR.valor_resolucion,
RA.valor_relacion_aspecto FROM Resolucion RE
INNER JOIN TipoResolucion TR ON RE.id_tipo_resolucion = TR.id_tipo_resolucion
INNER JOIN ValorResolucion VR ON RE.id_valor_resolucion = VR.id_valor_resolucion
INNER JOIN RelacionAspecto RA ON RE.id_relacion_aspecto = RA.id_relacion_aspecto
GROUP BY TR.nombre_tipo_resolucion, VR.valor_resolucion, RA.valor_relacion_aspecto

DROP TABLE Resolucion

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Formato(
    id_formato INT IDENTITY(1, 1) NOT NULL,
    nombre_formato VARCHAR(5) NOT NULL,
)

ALTER TABLE Formato ADD CONSTRAINT
id_formato_PK_CSTR PRIMARY KEY(id_formato)

INSERT INTO Formato(nombre_formato) VALUES
('AVI'),
('MKV'),
('MP4')

SELECT FO.id_formato,
FO.nombre_formato
FROM Formato FO

DROP TABLE Formato

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE DetalleTecnico(
    id_detalle INT IDENTITY(1, 1) NOT NULL,
    id_formato INT NOT NULL,
    id_tipo_resolucion INT NOT NULL,
    id_valor_resolucion INT NOT NULL,
    id_relacion_aspecto INT NOT NULL
)

ALTER TABLE DetalleTecnico ADD CONSTRAINT
id_detalle_PK_CSTR PRIMARY KEY(id_detalle)

ALTER TABLE DetalleTecnico ADD CONSTRAINT id_formato_FK_CSTR
FOREIGN KEY(id_formato) REFERENCES Formato(id_formato)

ALTER TABLE DetalleTecnico ADD CONSTRAINT id_tipo_valor_relacion_FK_CSTR
FOREIGN KEY(id_tipo_resolucion, id_valor_resolucion, id_relacion_aspecto)
REFERENCES Resolucion(id_tipo_resolucion, id_valor_resolucion, id_relacion_aspecto)

INSERT INTO DetalleTecnico(id_formato, id_tipo_resolucion,
id_valor_resolucion, id_relacion_aspecto) VALUES
(2, 3, 26, 3)

SELECT DT.id_detalle, DT.id_formato,
DT.id_tipo_resolucion, DT.id_valor_resolucion,
DT.id_relacion_aspecto FROM DetalleTecnico DT

SELECT FO.nombre_formato, TR.nombre_tipo_resolucion,
VR.valor_resolucion, RA.valor_relacion_aspecto FROM DetalleTecnico DT
INNER JOIN Formato FO ON DT.id_formato = FO.id_formato
INNER JOIN TipoResolucion TR ON DT.id_tipo_resolucion = TR.id_tipo_resolucion
INNER JOIN ValorResolucion VR ON DT.id_valor_resolucion = VR.id_valor_resolucion
INNER JOIN RelacionAspecto RA ON DT.id_relacion_aspecto = RA.id_relacion_aspecto
GROUP BY FO.nombre_formato, TR.nombre_tipo_resolucion,
VR.valor_resolucion, RA.valor_relacion_aspecto

DROP TABLE DetalleTecnico

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Pelicula(
    id_pelicula INT IDENTITY(1, 1) NOT NULL,
    nombre_pelicula VARCHAR(50) NOT NULL,
    fecha_estreno SMALLDATETIME NOT NULL,
    presupuesto MONEY NULL,
    recaudacion MONEY NULL,
    sinopsis VARCHAR(300) NOT NULL,
    calificacion_pelicula INT NULL,
    id_detalle INT NOT NULL
)

ALTER TABLE Pelicula ADD CONSTRAINT
id_pelicula_PK_CSTR PRIMARY KEY(id_pelicula)

ALTER TABLE Pelicula ADD CONSTRAINT id_detalle_FK_CSTR
FOREIGN KEY(id_detalle) REFERENCES DetalleTecnico(id_detalle)

INSERT INTO Pelicula(nombre_pelicula, fecha_estreno,
presupuesto, recaudacion, sinopsis,
calificacion_pelicula, id_detalle) VALUES 
('Avengers Infinity War','2018-04-27', 300000000, 2048359754,
'Thanos desaparece a la mitad del universo con las gemas.', NULL, 1)

SELECT PEL.id_pelicula, PEL.nombre_pelicula, PEL.fecha_estreno,
PEL.presupuesto, PEL.recaudacion, PEL.sinopsis,
PEL.calificacion_pelicula, PEL.id_detalle FROM Pelicula PEL

SELECT PEL.nombre_pelicula, FO.nombre_formato, TR.nombre_tipo_resolucion,
VR.valor_resolucion, RA.valor_relacion_aspecto FROM Pelicula PEL
INNER JOIN DetalleTecnico DT ON PEL.id_detalle = DT.id_detalle
INNER JOIN Formato FO ON DT.id_formato = FO.id_formato
INNER JOIN Resolucion RE ON DT.id_tipo_resolucion = RE.id_tipo_resolucion
AND DT.id_valor_resolucion = RE.id_valor_resolucion
AND DT.id_relacion_aspecto = RE.id_relacion_aspecto
INNER JOIN TipoResolucion TR ON RE.id_tipo_resolucion = TR.id_tipo_resolucion
INNER JOIN ValorResolucion VR ON RE.id_valor_resolucion = VR.id_valor_resolucion
INNER JOIN RelacionAspecto RA ON RE.id_relacion_aspecto = RA.id_relacion_aspecto
GROUP BY PEL.nombre_pelicula, FO.nombre_formato, TR.nombre_tipo_resolucion,
VR.valor_resolucion, RA.valor_relacion_aspecto ORDER BY PEL.nombre_pelicula ASC

DROP TABLE Pelicula

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Servidor(
    id_servidor INT IDENTITY(1, 1) NOT NULL,
    nombre_servidor VARCHAR(20) NOT NULL,
    sitio_servidor VARCHAR(50) NOT NULL
)

ALTER TABLE Servidor ADD CONSTRAINT
id_servidor_PK_CSTR PRIMARY KEY(id_servidor)

INSERT INTO Servidor(nombre_servidor, sitio_servidor) VALUES
('Zooqle','https://zooqle.com'),
('Mega','https://mega.nz'),
('Google Drive','https://www.google.com/drive'),
('Uptobox','https://www.uptoboxsearch.com'),
('btdb','http://btdb.to'),
('Mediafire','https://www.mediafire.com'),
('Odnoklassniki','https://ok.ru'),
('Openload','https://oload.fun'),
('RapidVideo','https://www.rapidvideo.com'),
('Uqload','https://uqload.com')

SELECT SE.id_servidor, SE.nombre_servidor,
SE.sitio_servidor FROM Servidor SE

DROP TABLE Servidor

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE TipoArchivo(
    id_tipo_archivo INT IDENTITY(1, 1) NOT NULL,
    nombre_tipo_archivo VARCHAR(5) NOT NULL
)

ALTER TABLE TipoArchivo ADD CONSTRAINT
id_tipo_archivo_PK_CSTR PRIMARY KEY(id_tipo_archivo)

INSERT INTO TipoArchivo(nombre_tipo_archivo) VALUES
('Audio'),
('Video')

SELECT TA.id_tipo_archivo,
TA.nombre_tipo_archivo
FROM TipoArchivo TA

DROP TABLE TipoArchivo

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Vigencia(
    id_vigencia INT IDENTITY(1, 1) NOT NULL,
    valor_vigencia VARCHAR(10) NOT NULL
)

ALTER TABLE Vigencia ADD CONSTRAINT
id_vigencia_PK_CSTR PRIMARY KEY(id_vigencia)

INSERT INTO Vigencia(valor_vigencia) VALUES
('Activo'),
('Inactivo')

SELECT VG.id_vigencia,
VG.valor_vigencia
FROM Vigencia VG

DROP TABLE Vigencia

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Descarga(
    id_descarga INT IDENTITY(1, 1) NOT NULL,
    password VARCHAR(30) NULL,
    id_tipo_archivo INT NOT NULL,
    id_servidor INT NOT NULL,
    id_pelicula INT NOT NULL
)

ALTER TABLE Descarga ADD CONSTRAINT
id_descarga_PK_CSTR PRIMARY KEY(id_descarga)

ALTER TABLE Descarga ADD CONSTRAINT id_tipo_archivo_FK_CSTR
FOREIGN KEY(id_tipo_archivo) REFERENCES TipoArchivo(id_tipo_archivo)

ALTER TABLE Descarga ADD CONSTRAINT id_servidor_FK_CSTR
FOREIGN KEY(id_servidor) REFERENCES Servidor(id_servidor)

ALTER TABLE Descarga ADD CONSTRAINT id_pelicula_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

INSERT INTO Descarga(password, id_tipo_archivo,
id_servidor, id_pelicula) VALUES
(NULL, 2, 2, 1)

SELECT PEL.nombre_pelicula, DS.id_descarga, DS.password,
TA.nombre_tipo_archivo, SE.nombre_servidor FROM Descarga DS 
INNER JOIN Pelicula PEL ON DS.id_pelicula = PEL.id_pelicula
INNER JOIN TipoArchivo TA ON DS.id_tipo_archivo = TA.id_tipo_archivo
INNER JOIN Servidor SE ON DS.id_servidor = SE.id_servidor

DROP TABLE Descarga

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Enlace(
    id_enlace INT IDENTITY(1, 1) NOT NULL,
    valor_enlace VARCHAR(150) NOT NULL,
    id_descarga INT NOT NULL,
    id_vigencia INT NOT NULL
)

ALTER TABLE Enlace ADD CONSTRAINT
id_enlace_PK_CSTR PRIMARY KEY(id_enlace)

ALTER TABLE Enlace ADD CONSTRAINT id_descarga_FK_CSTR
FOREIGN KEY(id_descarga) REFERENCES Descarga(id_descarga)

ALTER TABLE Enlace ADD CONSTRAINT id_vigencia_FK_CSTR
FOREIGN KEY(id_vigencia) REFERENCES Vigencia(id_vigencia)

INSERT INTO Enlace(valor_enlace, id_descarga, id_vigencia) VALUES
('https://mega.nz/#!MF80TIqD!dfwrcCQUqzg6nZW2H0fqALiiAi4vvEqe4ZwDjgiGjmw', 1, 1)

SELECT EN.id_enlace, EN.valor_enlace, 
EN.id_descarga, EN.id_vigencia FROM Enlace EN

SELECT PEL.nombre_pelicula, TA.nombre_tipo_archivo, SE.nombre_servidor,
EN.valor_enlace, DS.password, VG.valor_vigencia FROM Enlace EN
INNER JOIN Descarga DS ON EN.id_descarga = DS.id_descarga
INNER JOIN TipoArchivo TA ON DS.id_tipo_archivo = TA.id_tipo_archivo
INNER JOIN Servidor SE ON DS.id_servidor = SE.id_servidor
INNER JOIN Pelicula PEL ON DS.id_pelicula = PEL.id_pelicula
INNER JOIN Vigencia VG ON EN.id_vigencia = VG.id_vigencia

DROP TABLE Enlace

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE DetallePersona(
    id_detalle_persona INT IDENTITY(1, 1) NOT NULL,
    nombre_persona VARCHAR(50) NOT NULL,
    nacimiento_persona SMALLDATETIME NOT NULL,
    fallecimiento_persona SMALLDATETIME NULL,
    edad_persona INT NOT NULL,
    nacionalidad_persona VARCHAR(25),
    descripcion_persona VARCHAR(300) NOT NULL,
    sitio_persona VARCHAR(50) NULL
)

ALTER TABLE DetallePersona ADD CONSTRAINT
id_detalle_persona_PK_CSTR PRIMARY KEY(id_detalle_persona)

INSERT INTO DetallePersona(nombre_persona, nacimiento_persona, fallecimiento_persona,
edad_persona, nacionalidad_persona, descripcion_persona, sitio_persona) VALUES
('Robert Downey Jr.', '1965-04-04', NULL, 54, 'Estadounidense',
'Robert Downey Jr. es Iron Man.', 'https://robert-downeyjr.com'),
('Chris Hemsworth', '1983-08-11', NULL, 36, 'Australiano',
'Chris Hemsworth es Thor.', 'https://www.chris-hemsworth.net'),
('Anthony Russo', '1970-02-03', NULL, 49, 'Estadounidense',
'Director de Infinity War y Endgame.', 'https://www.instagram.com/therussobrothers/'),
('Joseph V. Russo', '1971-07-18', NULL, 48, 'Estadounidense',
'Director de Infinity War y Endgame.', 'https://www.instagram.com/therussobrothers/')

SELECT DP.id_detalle_persona, DP.nombre_persona,
DP.nacimiento_persona, DP.fallecimiento_persona,
DP.edad_persona, DP.nacionalidad_persona,
DP.descripcion_persona, DP.sitio_persona
FROM DetallePersona DP

DROP TABLE DetallePersona

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Actor(
    id_actor INT IDENTITY(1, 1) NOT NULL,
    id_detalle_persona INT NOT NULL
)

ALTER TABLE Actor ADD CONSTRAINT
id_actor_PK_CSTR PRIMARY KEY(id_actor)

ALTER TABLE Actor ADD CONSTRAINT id_detalle_persona_act_FK_CSTR
FOREIGN KEY(id_detalle_persona) REFERENCES DetallePersona(id_detalle_persona)

INSERT INTO Actor(id_detalle_persona) VALUES
(1), (2)

SELECT DP.nombre_persona, DP.nacimiento_persona,
DP.edad_persona, DP.nacionalidad_persona,
DP.descripcion_persona, DP.sitio_persona FROM DetallePersona DP 
INNER JOIN Actor AC ON DP.id_detalle_persona = AC.id_detalle_persona

DROP TABLE Actor

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE PeliculaActor(
    id_pelicula INT NOT NULL,
    id_actor INT NOT NULL
)

ALTER TABLE PeliculaActor
ADD CONSTRAINT id_pelicula_actor_PK_CSTR
PRIMARY KEY(id_pelicula, id_actor)

ALTER TABLE PeliculaActor ADD CONSTRAINT id_pelicula_pa_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

ALTER TABLE PeliculaActor ADD CONSTRAINT id_actor_FK_CSTR
FOREIGN KEY(id_actor) REFERENCES Actor(id_actor)

INSERT INTO PeliculaActor(id_pelicula, id_actor) VALUES
(1, 1),
(1, 2)

SELECT PEL.nombre_pelicula, DP.nombre_persona,
DP.nacionalidad_persona FROM PeliculaActor PA
INNER JOIN Pelicula PEL ON PA.id_pelicula = PEL.id_pelicula
INNER JOIN Actor AC ON PA.id_actor = AC.id_actor
INNER JOIN DetallePersona DP
ON AC.id_detalle_persona = DP.id_detalle_persona

DROP TABLE PeliculaActor

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Personaje(
    id_personaje INT IDENTITY(1, 1) NOT NULL,
    nombre_personaje VARCHAR(50) NOT NULL,
    descripcion_personaje VARCHAR(300) NOT NULL
)

ALTER TABLE Personaje ADD CONSTRAINT
id_personaje_PK_CSTR PRIMARY KEY(id_personaje)

INSERT INTO Personaje(nombre_personaje, descripcion_personaje) VALUES
('Iron Man', 'Iron Man salvó al universo de Thanos.'),
('Thor', 'Thor debió haber muerto en EndGame.')

SELECT PER.id_personaje, PER.nombre_personaje,
PER.descripcion_personaje FROM Personaje PER

DROP TABLE Personaje

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE PeliculaActorPersonaje(
    id_personaje INT NOT NULL,
    id_pelicula INT NOT NULL,
    id_actor INT NOT NULL
)

ALTER TABLE PeliculaActorPersonaje ADD CONSTRAINT
id_personaje_pelicula_actor_PK_CSTR
PRIMARY KEY(id_personaje, id_pelicula, id_actor)

ALTER TABLE PeliculaActorPersonaje ADD CONSTRAINT
id_personaje_FK_CSTR FOREIGN KEY(id_personaje)
REFERENCES Personaje(id_personaje)

ALTER TABLE PeliculaActorPersonaje ADD CONSTRAINT
id_pelicula_actor_FK_CSTR FOREIGN KEY(id_pelicula, id_actor)
REFERENCES PeliculaActor(id_pelicula, id_actor)

INSERT INTO PeliculaActorPersonaje(id_personaje, id_pelicula, id_actor) VALUES
(1, 1, 1),
(2, 1, 2)

SELECT PEL.nombre_pelicula, DP.nombre_persona,
PER.nombre_personaje FROM PeliculaActorPersonaje PAP
INNER JOIN Personaje PER ON PAP.id_personaje = PER.id_personaje
INNER JOIN PeliculaActor PA ON PAP.id_pelicula = PA.id_pelicula AND PAP.id_actor = PA.id_actor
INNER JOIN Pelicula PEL ON PA.id_pelicula = PEL.id_pelicula
INNER JOIN Actor AC ON PA.id_actor = AC.id_actor
INNER JOIN DetallePersona DP ON AC.id_detalle_persona = DP.id_detalle_persona
GROUP BY PEL.nombre_pelicula, DP.nombre_persona, PER.nombre_personaje
ORDER BY PEL.nombre_pelicula ASC

DROP TABLE PeliculaActorPersonaje

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Director(
    id_director INT IDENTITY(1, 1) NOT NULL,
    id_detalle_persona INT NOT NULL
)

ALTER TABLE Director ADD CONSTRAINT
id_director_PK_CSTR PRIMARY KEY(id_director)

ALTER TABLE Director ADD CONSTRAINT id_detalle_persona_dir_FK_CSTR
FOREIGN KEY(id_detalle_persona) REFERENCES DetallePersona(id_detalle_persona)

INSERT INTO Director(id_detalle_persona) VALUES
(3), (4)

SELECT DIR.id_director, DP.nombre_persona,
DP.nacimiento_persona, DP.edad_persona,
DP.nacionalidad_persona, DP.descripcion_persona
FROM Director DIR INNER JOIN DetallePersona DP
ON DIR.id_detalle_persona = DP.id_detalle_persona

DROP TABLE Director

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE PeliculaDirector(
    id_pelicula INT NOT NULL,
    id_director INT NOT NULL
)

ALTER TABLE PeliculaDirector
ADD CONSTRAINT id_pelicula_director_PK_CSTR
PRIMARY KEY(id_pelicula, id_director)

ALTER TABLE PeliculaDirector ADD CONSTRAINT id_pelicula_pd_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

ALTER TABLE PeliculaDirector ADD CONSTRAINT id_director_FK_CSTR
FOREIGN KEY(id_director) REFERENCES Director(id_director)

INSERT INTO PeliculaDirector(id_pelicula, id_director) VALUES
(1, 1),
(1, 2)

SELECT PEL.nombre_pelicula, DP.nombre_persona FROM PeliculaDirector PD
INNER JOIN Pelicula PEL ON PD.id_pelicula = PEL.id_pelicula
INNER JOIN Director DIR ON PD.id_director = DIR.id_director
INNER JOIN DetallePersona DP ON DIR.id_detalle_persona = DP.id_detalle_persona
GROUP BY PEL.nombre_pelicula, DP.nombre_persona
ORDER BY PEL.nombre_pelicula ASC

DROP TABLE PeliculaDirector

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Productora(
    id_productora INT IDENTITY(1, 1) NOT NULL,
    nombre_productora VARCHAR(50) NOT NULL,
    descripcion_productora VARCHAR(300) NOT NULL
)

ALTER TABLE Productora ADD CONSTRAINT
id_productora_PK_CSTR PRIMARY KEY(id_productora)

INSERT INTO Productora(nombre_productora, descripcion_productora) VALUES
('Marvel Studios', 'Estudio cinematográfico en Walt Disney Studios')

SELECT PROD.id_productora, PROD.nombre_productora,
PROD.descripcion_productora FROM Productora PROD

DROP TABLE Productora

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE ProductoraPelicula(
   id_productora INT NOT NULL,
   id_pelicula INT NOT NULL
)

ALTER TABLE ProductoraPelicula
ADD CONSTRAINT id_productora_pelicula_PK_CSTR
PRIMARY KEY(id_productora, id_pelicula)

ALTER TABLE ProductoraPelicula ADD CONSTRAINT id_productora_FK_CSTR
FOREIGN KEY(id_productora) REFERENCES Productora(id_productora)

ALTER TABLE ProductoraPelicula ADD CONSTRAINT id_pelicula_pp_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

INSERT INTO ProductoraPelicula(id_productora, id_pelicula) VALUES
(1, 1)

SELECT PEL.nombre_pelicula, PROD.nombre_productora FROM ProductoraPelicula PP
INNER JOIN Productora PROD ON PP.id_productora = PROD.id_productora
INNER JOIN Pelicula PEL ON PP.id_pelicula = PEL.id_pelicula
GROUP BY PEL.nombre_pelicula, PROD.nombre_productora
ORDER BY PEL.nombre_pelicula ASC

DROP TABLE ProductoraPelicula

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Idioma(
    id_idioma INT IDENTITY(1, 1) NOT NULL,
    nombre_idioma VARCHAR(50) NOT NULL
)

ALTER TABLE Idioma ADD CONSTRAINT
id_idioma_PK_CSTR PRIMARY KEY(id_idioma)

INSERT INTO Idioma(nombre_idioma) VALUES
('Español'),
('Inglés'),
('Ruso'),
('Frances')

SELECT id_idioma, nombre_idioma
FROM Idioma

DROP TABLE Idioma

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE IdiomaPelicula(
   id_idioma INT NOT NULL,
   id_pelicula INT NOT NULL
)

ALTER TABLE IdiomaPelicula
ADD CONSTRAINT id_idioma_pelicula_PK_CSTR
PRIMARY KEY(id_idioma, id_pelicula)

ALTER TABLE IdiomaPelicula ADD CONSTRAINT id_idioma_FK_CSTR
FOREIGN KEY(id_idioma) REFERENCES Idioma(id_idioma)

ALTER TABLE IdiomaPelicula ADD CONSTRAINT id_pelicula_ip_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

INSERT INTO IdiomaPelicula(id_idioma, id_pelicula) VALUES
(1, 1),
(2, 1),
(3, 1)

SELECT PEL.nombre_pelicula, ID.nombre_idioma FROM IdiomaPelicula IP
INNER JOIN Idioma ID ON IP.id_idioma = ID.id_idioma
INNER JOIN Pelicula PEL ON IP.id_pelicula = PEL.id_pelicula
GROUP BY PEL.nombre_pelicula, ID.nombre_idioma
ORDER BY PEL.nombre_pelicula ASC

DROP TABLE IdiomaPelicula

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Escena(
    id_escena INT IDENTITY(1, 1) NOT NULL,
    nombre_escena VARCHAR(100) NOT NULL,
    critica_escena VARCHAR(300)  NOT NULL,
    inicio_escena TIME NOT NULL,
    fin_escena TIME NOT NULL,
    calificacion_escena INT NOT NULL,
    id_pelicula INT NOT NULL
)

ALTER TABLE Escena ADD CONSTRAINT
id_escena_PK_CSTR PRIMARY KEY(id_escena)

ALTER TABLE Escena ADD CONSTRAINT id_pelicula_esc_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

INSERT INTO Escena(nombre_escena, critica_escena, inicio_escena,
fin_escena, calificacion_escena, id_pelicula) VALUES
('La emboscada de Thanos a la nave asgardiana.', 'Dominio imponente de Thanos, nadie puede detenerlo.', '00:00:45.327', '00:10:15.200', 100, 1),
('La llegada y aviso de Hulk sobre Thanos.', 'Argumentos cómicos irrelebantes. Banner aterrorizado.', '00:10:16.835', '00:11:17.836', 90, 1),
('Presentación de de Infinity War.', 'Gran entrada, buen logo y música.', '00:11:18.341', '00:11:26.772', 100, 1),
('El reencuentro de Banner y Tony.', 'Triste aviso de Dr. Strange y Banner acerca del destino del universo.', '00:11:27.430', '00:13:18.227', 100, 1),
('Explicación sobre Thanos y las gemas.', 'Comedia irrelevante en un momento serio.', '00:13:18.296', '00:16:51.561', 95, 1),
('Llegada de la nave de Ebony Maw a New York.', 'Inesperada y extraña llegada que causa caos en la ciudad.', '00:16:54.817', '00:18:14.553', 100, 1),
('Primera aparición de Spider-Man en el autobus.', 'Pésima y cómica actuación de Ned Leeds.', '00:18:14.625', '00:18:57.999', 90, 1),
('Ebony Maw y Black Dwarf vs Dr. Strange, Ironman, Banner, Wong y Spiderman', 'Épico combate y enemigos nada fáciles. Le faltó convertirse a Banner.', '00:19:20.276', '00:27:21.969', 95, 1)

SELECT PEL.nombre_pelicula, ESC.nombre_escena, ESC.calificacion_escena
FROM Escena ESC INNER JOIN Pelicula PEL ON ESC.id_pelicula = PEL.id_pelicula
ORDER BY PEL.nombre_pelicula ASC, ESC.calificacion_escena DESC

DROP TABLE Escena

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Genero(
    id_genero INT IDENTITY(1, 1) NOT NULL,
    nombre_genero VARCHAR(30) NOT NULL
)

ALTER TABLE Genero ADD CONSTRAINT
id_genero_PK_CSTR PRIMARY KEY(id_genero)

INSERT INTO Genero(nombre_genero) VALUES
('Fantasía'),
('Ciencia Ficción'),
('Suspenso'),
('Policíaco'),
('Acción'),
('Drama'),
('Culto'),
('Misterio'),
('Terror'),
('Found Footage'),
('Slasher'),
('Bélico'),
('Histórico'),
('Catástrofe'),
('Venganza')

SELECT id_genero, nombre_genero
FROM Genero

DROP TABLE Genero

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE GeneroPelicula(
   id_genero INT NOT NULL,
   id_pelicula INT NOT NULL
)

ALTER TABLE GeneroPelicula
ADD CONSTRAINT id_genero_pelicula_PK_CSTR
PRIMARY KEY(id_genero, id_pelicula)

ALTER TABLE GeneroPelicula ADD CONSTRAINT id_genero_FK_CSTR
FOREIGN KEY(id_genero) REFERENCES Genero(id_genero)

ALTER TABLE GeneroPelicula ADD CONSTRAINT id_pelicula_gp_FK_CSTR
FOREIGN KEY(id_pelicula) REFERENCES Pelicula(id_pelicula)

INSERT INTO GeneroPelicula(id_genero, id_pelicula) VALUES
(1, 1),
(2, 1)

SELECT PEL.nombre_pelicula, GE.nombre_genero FROM GeneroPelicula GP
INNER JOIN Genero ID ON GP.id_genero = GE.id_genero
INNER JOIN Pelicula PEL ON GP.id_pelicula = PEL.id_pelicula
GROUP BY PEL.nombre_pelicula, GE.nombre_genero
ORDER BY PEL.nombre_pelicula ASC

DROP TABLE GeneroPelicula

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Usuario(
   id_usuario INT IDENTITY(1, 1) NOT NULL,
   nombre_usuario VARCHAR(70) NOT NULL,
   correo_usuario VARCHAR(50) NOT NULL,
   password_usuario VARCHAR(32) NOT NULL,
   tipo_usuario INT NOT NULL,
)

ALTER TABLE Usuario ADD CONSTRAINT id_usuario_PK_CSTR PRIMARY KEY(id_usuario)

INSERT INTO Usuario(nombre_usuario, correo_usuario,
password_usuario, tipo_usuario) VALUES
('admin', 'luis-aaron40@hotmail.com', 'Wc+gCD/DHyc=', 1)

SELECT id_usuario, nombre_usuario, correo_usuario, 
password_usuario, tipo_usuario FROM Usuario

DROP TABLE Usuario

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Token(
    id_token INT IDENTITY(1, 1) NOT NULL,
    valor_token VARCHAR(180) NOT NULL,
    emision_token DATETIME NOT NULL,
    expiracion_token DATETIME NULL,
    id_usuario INT NOT NULL
)

ALTER TABLE Token ADD CONSTRAINT id_token_PK_CSTR PRIMARY KEY(id_token)

ALTER TABLE Token ADD CONSTRAINT id_usuario_tk_FK_CSTR
FOREIGN KEY(id_usuario) REFERENCES Usuario(id_usuario)

SELECT id_token, valor_token, emision_token,
expiracion_token, id_usuario FROM Token

DROP TABLE Token

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE Solicitud(
   id_solicitud INT IDENTITY(1, 1) NOT NULL,
   nombre_solicitud VARCHAR(30) NOT NULL
)

ALTER TABLE Solicitud ADD CONSTRAINT
id_solicitud_PK_CSTR PRIMARY KEY(id_solicitud)

INSERT INTO Solicitud(nombre_solicitud) VALUES
('forgotten password'),
('token request')

SELECT id_solicitud, nombre_solicitud FROM Solicitud

DROP TABLE Solicitud

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TABLE UsuarioSolicitud(
   id_usuario_solicitud INT IDENTITY(1, 1) NOT NULL,
   id_usuario INT NOT NULL,
   id_solicitud INT NOT NULL,
   status_solicitud INT NOT NULL,
   emision_solicitud DATETIME2 NOT NULL,
   aprobacion_solicitud DATETIME2 NULL
)

ALTER TABLE UsuarioSolicitud ADD CONSTRAINT
id_usuario_solicitud_PK_CSTR
PRIMARY KEY(id_usuario_solicitud)

ALTER TABLE UsuarioSolicitud ADD CONSTRAINT id_usuario_us_FK_CSTR
FOREIGN KEY(id_usuario) REFERENCES Usuario(id_usuario)

ALTER TABLE UsuarioSolicitud ADD CONSTRAINT id_solicitud_FK_CSTR
FOREIGN KEY(id_solicitud) REFERENCES Solicitud(id_solicitud)

SELECT id_usuario_solicitud, id_usuario, id_solicitud, status_solicitud,
emision_solicitud, aprobacion_solicitud FROM UsuarioSolicitud

DROP TABLE UsuarioSolicitud

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE VIEW VSolicitud AS
	SELECT US.id_usuario_solicitud AS id, U.nombre_usuario AS usuario, S.nombre_solicitud AS tipo,
	CASE US.status_solicitud
		WHEN 0 THEN 'Solicitada' WHEN 1 THEN 'Aprobada' WHEN 2 THEN 'Terminada'
	END AS status,
	US.emision_solicitud AS emision,
	US.aprobacion_solicitud AS aprobacion
	FROM UsuarioSolicitud US
	INNER JOIN Usuario U ON US.id_usuario = U.id_usuario
	INNER JOIN Solicitud S ON US.id_solicitud = S.id_solicitud

SELECT * FROM VSolicitud

DROP VIEW VSolicitud

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE VIEW VToken AS
	SELECT TK.id_token AS id, TK.valor_token AS codigo, TK.emision_token AS emision,
	TK.expiracion_token AS expiracion, US.nombre_usuario AS usuario
	FROM Token TK INNER JOIN Usuario US ON TK.id_usuario = US.id_usuario

SELECT * FROM VToken

DROP VIEW VToken

------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------

CREATE TRIGGER ActualizaCalificacionPelicula
ON Escena AFTER INSERT, UPDATE, DELETE AS
BEGIN
    DECLARE @id_pelicula INT
    DECLARE @calificacion_pelicula INT
    IF EXISTS (SELECT 1 FROM inserted)
    BEGIN
        SET @id_pelicula = (SELECT id_pelicula FROM inserted)
    END
    ELSE
    BEGIN
        SET @id_pelicula = (SELECT id_pelicula FROM deleted)
    END
    SET @calificacion_pelicula = (SELECT AVG(calificacion_escena)
    FROM Escena WHERE id_pelicula = @id_pelicula)
    UPDATE Pelicula SET calificacion_pelicula = @calificacion_pelicula
    WHERE id_pelicula = @id_pelicula
END

DROP TRIGGER ActualizaCalificacionPelicula

------------------------------------------------------------------------------------------------------